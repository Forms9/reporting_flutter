// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'database.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 6300052857861746089),
      name: 'DailySaleData',
      lastPropertyId: const IdUid(5, 5504038307615200802),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7127045887798902938),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 992314235764803368),
            name: 'saleCard',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3433884623445050038),
            name: 'saleCash',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2495963641384745546),
            name: 'salePoints',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5504038307615200802),
            name: 'saleCreatedDate',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 5099747319293151096),
      name: 'DispatchData',
      lastPropertyId: const IdUid(3, 1106760950969995033),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3918921496570371595),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2281289971511782346),
            name: 'dispatchNumber',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1106760950969995033),
            name: 'dispatchCreatedDate',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 2058197405721167836),
      name: 'POSNumber',
      lastPropertyId: const IdUid(2, 8667494812776538407),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2102861763109199050),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8667494812776538407),
            name: 'posNumber',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 8638388820725839643),
      name: 'ProductData',
      lastPropertyId: const IdUid(38, 4475438584645715879),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3297747851109666742),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1616394839092410273),
            name: 'serverId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8760378809879781450),
            name: 'inwardNo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7941374215634704498),
            name: 'uniqueNo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 704630417916781962),
            name: 'productName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3915078850410226571),
            name: 'supplier',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6721910448104465860),
            name: 'color',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6918894928090038792),
            name: 'qty',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1508936095220879641),
            name: 'height',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 7563137021004414821),
            name: 'width',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 6315263600950798219),
            name: 'depth',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 4651600367687073988),
            name: 'size',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 7399195732077510135),
            name: 'headline',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 1056611387656872012),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 6512006514736728409),
            name: 'description2',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 356018533619819698),
            name: 'supSlNp',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 5905216133591696721),
            name: 'material',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 1604563297681880168),
            name: 'finish',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 2212147329074485546),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 4633307965913140796),
            name: 'photoLink',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 6858068077953328030),
            name: 'photoLinkMain',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 6178509857417198402),
            name: 'rate',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(23, 8961357223472220407),
            name: 'calculation',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(24, 6088918045807211176),
            name: 'cipher',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(25, 8390649108939016619),
            name: 'createdDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(26, 7954203404741552949),
            name: 'add1',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(27, 9206874200852050104),
            name: 'add2',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(28, 1095899341036184976),
            name: 'add1a',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(29, 5297575018653355166),
            name: 'add2a',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(30, 3106139975117736098),
            name: 'billNo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(31, 7819732473799061318),
            name: 'greturn',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(32, 1227960409539745400),
            name: 'labelQty',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(33, 7366575412982110225),
            name: 'packingNo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(34, 8314574230095860122),
            name: 'packedQuantity',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(35, 4267896651989628561),
            name: 'cartonNo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(36, 1918497275465878893),
            name: 'invoiceNo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(37, 7276078587250313435),
            name: 'transportBy',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(38, 4475438584645715879),
            name: 'distpatchNo',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 263698262795959006),
      name: 'SaleData',
      lastPropertyId: const IdUid(11, 8484399423045153303),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2050402857436460996),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8875723715069845818),
            name: 'saleNumber',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3174242504594579921),
            name: 'saleCreatedDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6087937234873338972),
            name: 'saleTotal',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1464657052747154183),
            name: 'saleDiscount',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8926887038054670182),
            name: 'saleCard',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5360556043557059810),
            name: 'saleCash',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2188008096313437658),
            name: 'salePoints',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1294437315528438219),
            name: 'saleBalance',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 1270973014360376904),
            name: 'data',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 8484399423045153303),
            name: 'isNoExch',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 6623595756514423958),
      name: 'SaleMode',
      lastPropertyId: const IdUid(2, 278213769333819930),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6550608404777092929),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 278213769333819930),
            name: 'mode',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 130999591080390110),
      name: 'SaleNumberData',
      lastPropertyId: const IdUid(3, 6848634779220601053),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7805238727545501289),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6487679109505521864),
            name: 'saleNumber',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6848634779220601053),
            name: 'saleCreatedDate',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 2385353795457361801),
      name: 'User',
      lastPropertyId: const IdUid(5, 7282051863073292135),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6936657266170106936),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4295326105446591640),
            name: 'username',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 441125780219401954),
            name: 'password',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8244768053244204240),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7282051863073292135),
            name: 'store',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(8, 2385353795457361801),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    DailySaleData: EntityDefinition<DailySaleData>(
        model: _entities[0],
        toOneRelations: (DailySaleData object) => [],
        toManyRelations: (DailySaleData object) => {},
        getId: (DailySaleData object) => object.id,
        setId: (DailySaleData object, int id) {
          object.id = id;
        },
        objectToFB: (DailySaleData object, fb.Builder fbb) {
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.saleCard);
          fbb.addFloat64(2, object.saleCash);
          fbb.addFloat64(3, object.salePoints);
          fbb.addInt64(4, object.saleCreatedDate.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DailySaleData(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              saleCard:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0),
              saleCash:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0),
              salePoints:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0),
              saleCreatedDate: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)));

          return object;
        }),
    DispatchData: EntityDefinition<DispatchData>(
        model: _entities[1],
        toOneRelations: (DispatchData object) => [],
        toManyRelations: (DispatchData object) => {},
        getId: (DispatchData object) => object.id,
        setId: (DispatchData object, int id) {
          object.id = id;
        },
        objectToFB: (DispatchData object, fb.Builder fbb) {
          final dispatchNumberOffset = fbb.writeString(object.dispatchNumber);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, dispatchNumberOffset);
          fbb.addInt64(2, object.dispatchCreatedDate.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DispatchData(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              dispatchNumber: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              dispatchCreatedDate: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)));

          return object;
        }),
    POSNumber: EntityDefinition<POSNumber>(
        model: _entities[2],
        toOneRelations: (POSNumber object) => [],
        toManyRelations: (POSNumber object) => {},
        getId: (POSNumber object) => object.id,
        setId: (POSNumber object, int id) {
          object.id = id;
        },
        objectToFB: (POSNumber object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.posNumber);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = POSNumber(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              posNumber:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));

          return object;
        }),
    ProductData: EntityDefinition<ProductData>(
        model: _entities[3],
        toOneRelations: (ProductData object) => [],
        toManyRelations: (ProductData object) => {},
        getId: (ProductData object) => object.id,
        setId: (ProductData object, int id) {
          object.id = id;
        },
        objectToFB: (ProductData object, fb.Builder fbb) {
          final inwardNoOffset = object.inwardNo == null
              ? null
              : fbb.writeString(object.inwardNo!);
          final uniqueNoOffset = object.uniqueNo == null
              ? null
              : fbb.writeString(object.uniqueNo!);
          final productNameOffset = object.productName == null
              ? null
              : fbb.writeString(object.productName!);
          final supplierOffset = object.supplier == null
              ? null
              : fbb.writeString(object.supplier!);
          final colorOffset =
              object.color == null ? null : fbb.writeString(object.color!);
          final sizeOffset =
              object.size == null ? null : fbb.writeString(object.size!);
          final headlineOffset = object.headline == null
              ? null
              : fbb.writeString(object.headline!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final description2Offset = object.description2 == null
              ? null
              : fbb.writeString(object.description2!);
          final supSlNpOffset =
              object.supSlNp == null ? null : fbb.writeString(object.supSlNp!);
          final materialOffset = object.material == null
              ? null
              : fbb.writeString(object.material!);
          final finishOffset =
              object.finish == null ? null : fbb.writeString(object.finish!);
          final typeOffset =
              object.type == null ? null : fbb.writeString(object.type!);
          final photoLinkOffset = object.photoLink == null
              ? null
              : fbb.writeString(object.photoLink!);
          final photoLinkMainOffset = object.photoLinkMain == null
              ? null
              : fbb.writeString(object.photoLinkMain!);
          final calculationOffset = object.calculation == null
              ? null
              : fbb.writeString(object.calculation!);
          final cipherOffset =
              object.cipher == null ? null : fbb.writeString(object.cipher!);
          final createdDateOffset = object.createdDate == null
              ? null
              : fbb.writeString(object.createdDate!);
          final billNoOffset =
              object.billNo == null ? null : fbb.writeString(object.billNo!);
          final packingNoOffset = object.packingNo == null
              ? null
              : fbb.writeString(object.packingNo!);
          final cartonNoOffset = object.cartonNo == null
              ? null
              : fbb.writeString(object.cartonNo!);
          final invoiceNoOffset = object.invoiceNo == null
              ? null
              : fbb.writeString(object.invoiceNo!);
          final transportByOffset = object.transportBy == null
              ? null
              : fbb.writeString(object.transportBy!);
          final distpatchNoOffset = object.distpatchNo == null
              ? null
              : fbb.writeString(object.distpatchNo!);
          fbb.startTable(39);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.serverId);
          fbb.addOffset(2, inwardNoOffset);
          fbb.addOffset(3, uniqueNoOffset);
          fbb.addOffset(4, productNameOffset);
          fbb.addOffset(5, supplierOffset);
          fbb.addOffset(6, colorOffset);
          fbb.addFloat64(7, object.qty);
          fbb.addFloat64(8, object.height);
          fbb.addFloat64(9, object.width);
          fbb.addFloat64(10, object.depth);
          fbb.addOffset(11, sizeOffset);
          fbb.addOffset(12, headlineOffset);
          fbb.addOffset(13, descriptionOffset);
          fbb.addOffset(14, description2Offset);
          fbb.addOffset(15, supSlNpOffset);
          fbb.addOffset(16, materialOffset);
          fbb.addOffset(17, finishOffset);
          fbb.addOffset(18, typeOffset);
          fbb.addOffset(19, photoLinkOffset);
          fbb.addOffset(20, photoLinkMainOffset);
          fbb.addFloat64(21, object.rate);
          fbb.addOffset(22, calculationOffset);
          fbb.addOffset(23, cipherOffset);
          fbb.addOffset(24, createdDateOffset);
          fbb.addFloat64(25, object.add1);
          fbb.addFloat64(26, object.add2);
          fbb.addFloat64(27, object.add1a);
          fbb.addFloat64(28, object.add2a);
          fbb.addOffset(29, billNoOffset);
          fbb.addFloat64(30, object.greturn);
          fbb.addFloat64(31, object.labelQty);
          fbb.addOffset(32, packingNoOffset);
          fbb.addFloat64(33, object.packedQuantity);
          fbb.addOffset(34, cartonNoOffset);
          fbb.addOffset(35, invoiceNoOffset);
          fbb.addOffset(36, transportByOffset);
          fbb.addOffset(37, distpatchNoOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ProductData(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              serverId: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 6),
              inwardNo: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              uniqueNo: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              productName: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              supplier: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              color: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              qty: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 18),
              height: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 20),
              width: const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 22),
              depth: const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 24),
              size: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 26),
              headline: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 28),
              description: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 30),
              description2: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 32),
              supSlNp: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 34),
              material: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 36),
              finish: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 38),
              type: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 40),
              photoLink: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 42),
              photoLinkMain: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 44),
              rate: const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 46),
              calculation: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 48),
              cipher: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 50),
              createdDate: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 52),
              add1: const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 54),
              add2: const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 56),
              add1a: const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 58),
              add2a: const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 60),
              billNo: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 62),
              greturn: const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 64),
              labelQty: const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 66),
              packingNo: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 68),
              packedQuantity: const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 70),
              cartonNo: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 72),
              invoiceNo: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 74),
              transportBy: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 76),
              distpatchNo: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 78));

          return object;
        }),
    SaleData: EntityDefinition<SaleData>(
        model: _entities[4],
        toOneRelations: (SaleData object) => [],
        toManyRelations: (SaleData object) => {},
        getId: (SaleData object) => object.id,
        setId: (SaleData object, int id) {
          object.id = id;
        },
        objectToFB: (SaleData object, fb.Builder fbb) {
          final saleNumberOffset = fbb.writeString(object.saleNumber);
          final saleTotalOffset = fbb.writeString(object.saleTotal);
          final saleDiscountOffset = fbb.writeString(object.saleDiscount);
          final saleCardOffset = fbb.writeString(object.saleCard);
          final saleCashOffset = fbb.writeString(object.saleCash);
          final salePointsOffset = fbb.writeString(object.salePoints);
          final saleBalanceOffset = fbb.writeString(object.saleBalance);
          final dataOffset = fbb.writeList(
              object.data.map(fbb.writeString).toList(growable: false));
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, saleNumberOffset);
          fbb.addInt64(2, object.saleCreatedDate.millisecondsSinceEpoch);
          fbb.addOffset(3, saleTotalOffset);
          fbb.addOffset(4, saleDiscountOffset);
          fbb.addOffset(5, saleCardOffset);
          fbb.addOffset(6, saleCashOffset);
          fbb.addOffset(7, salePointsOffset);
          fbb.addOffset(8, saleBalanceOffset);
          fbb.addOffset(9, dataOffset);
          fbb.addBool(10, object.isNoExch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SaleData(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              saleNumber: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              saleCreatedDate: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              saleTotal: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              saleDiscount: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              saleCard: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              saleCash: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              salePoints: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''),
              saleBalance:
                  const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 20, ''),
              data: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 22, []),
              isNoExch: const fb.BoolReader().vTableGet(buffer, rootOffset, 24, false));

          return object;
        }),
    SaleMode: EntityDefinition<SaleMode>(
        model: _entities[5],
        toOneRelations: (SaleMode object) => [],
        toManyRelations: (SaleMode object) => {},
        getId: (SaleMode object) => object.id,
        setId: (SaleMode object, int id) {
          object.id = id;
        },
        objectToFB: (SaleMode object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addBool(1, object.mode);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SaleMode(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              mode: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 6, false));

          return object;
        }),
    SaleNumberData: EntityDefinition<SaleNumberData>(
        model: _entities[6],
        toOneRelations: (SaleNumberData object) => [],
        toManyRelations: (SaleNumberData object) => {},
        getId: (SaleNumberData object) => object.id,
        setId: (SaleNumberData object, int id) {
          object.id = id;
        },
        objectToFB: (SaleNumberData object, fb.Builder fbb) {
          final saleNumberOffset = fbb.writeString(object.saleNumber);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, saleNumberOffset);
          fbb.addInt64(2, object.saleCreatedDate.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SaleNumberData(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              saleNumber: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              saleCreatedDate: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)));

          return object;
        }),
    User: EntityDefinition<User>(
        model: _entities[7],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {},
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final usernameOffset = fbb.writeString(object.username);
          final passwordOffset = fbb.writeString(object.password);
          final typeOffset = fbb.writeString(object.type);
          final storeOffset = fbb.writeString(object.store);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, usernameOffset);
          fbb.addOffset(2, passwordOffset);
          fbb.addOffset(3, typeOffset);
          fbb.addOffset(4, storeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = User(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              username: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              password: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              type: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              store: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [DailySaleData] entity fields to define ObjectBox queries.
class DailySaleData_ {
  /// see [DailySaleData.id]
  static final id =
      QueryIntegerProperty<DailySaleData>(_entities[0].properties[0]);

  /// see [DailySaleData.saleCard]
  static final saleCard =
      QueryDoubleProperty<DailySaleData>(_entities[0].properties[1]);

  /// see [DailySaleData.saleCash]
  static final saleCash =
      QueryDoubleProperty<DailySaleData>(_entities[0].properties[2]);

  /// see [DailySaleData.salePoints]
  static final salePoints =
      QueryDoubleProperty<DailySaleData>(_entities[0].properties[3]);

  /// see [DailySaleData.saleCreatedDate]
  static final saleCreatedDate =
      QueryIntegerProperty<DailySaleData>(_entities[0].properties[4]);
}

/// [DispatchData] entity fields to define ObjectBox queries.
class DispatchData_ {
  /// see [DispatchData.id]
  static final id =
      QueryIntegerProperty<DispatchData>(_entities[1].properties[0]);

  /// see [DispatchData.dispatchNumber]
  static final dispatchNumber =
      QueryStringProperty<DispatchData>(_entities[1].properties[1]);

  /// see [DispatchData.dispatchCreatedDate]
  static final dispatchCreatedDate =
      QueryIntegerProperty<DispatchData>(_entities[1].properties[2]);
}

/// [POSNumber] entity fields to define ObjectBox queries.
class POSNumber_ {
  /// see [POSNumber.id]
  static final id = QueryIntegerProperty<POSNumber>(_entities[2].properties[0]);

  /// see [POSNumber.posNumber]
  static final posNumber =
      QueryIntegerProperty<POSNumber>(_entities[2].properties[1]);
}

/// [ProductData] entity fields to define ObjectBox queries.
class ProductData_ {
  /// see [ProductData.id]
  static final id =
      QueryIntegerProperty<ProductData>(_entities[3].properties[0]);

  /// see [ProductData.serverId]
  static final serverId =
      QueryIntegerProperty<ProductData>(_entities[3].properties[1]);

  /// see [ProductData.inwardNo]
  static final inwardNo =
      QueryStringProperty<ProductData>(_entities[3].properties[2]);

  /// see [ProductData.uniqueNo]
  static final uniqueNo =
      QueryStringProperty<ProductData>(_entities[3].properties[3]);

  /// see [ProductData.productName]
  static final productName =
      QueryStringProperty<ProductData>(_entities[3].properties[4]);

  /// see [ProductData.supplier]
  static final supplier =
      QueryStringProperty<ProductData>(_entities[3].properties[5]);

  /// see [ProductData.color]
  static final color =
      QueryStringProperty<ProductData>(_entities[3].properties[6]);

  /// see [ProductData.qty]
  static final qty =
      QueryDoubleProperty<ProductData>(_entities[3].properties[7]);

  /// see [ProductData.height]
  static final height =
      QueryDoubleProperty<ProductData>(_entities[3].properties[8]);

  /// see [ProductData.width]
  static final width =
      QueryDoubleProperty<ProductData>(_entities[3].properties[9]);

  /// see [ProductData.depth]
  static final depth =
      QueryDoubleProperty<ProductData>(_entities[3].properties[10]);

  /// see [ProductData.size]
  static final size =
      QueryStringProperty<ProductData>(_entities[3].properties[11]);

  /// see [ProductData.headline]
  static final headline =
      QueryStringProperty<ProductData>(_entities[3].properties[12]);

  /// see [ProductData.description]
  static final description =
      QueryStringProperty<ProductData>(_entities[3].properties[13]);

  /// see [ProductData.description2]
  static final description2 =
      QueryStringProperty<ProductData>(_entities[3].properties[14]);

  /// see [ProductData.supSlNp]
  static final supSlNp =
      QueryStringProperty<ProductData>(_entities[3].properties[15]);

  /// see [ProductData.material]
  static final material =
      QueryStringProperty<ProductData>(_entities[3].properties[16]);

  /// see [ProductData.finish]
  static final finish =
      QueryStringProperty<ProductData>(_entities[3].properties[17]);

  /// see [ProductData.type]
  static final type =
      QueryStringProperty<ProductData>(_entities[3].properties[18]);

  /// see [ProductData.photoLink]
  static final photoLink =
      QueryStringProperty<ProductData>(_entities[3].properties[19]);

  /// see [ProductData.photoLinkMain]
  static final photoLinkMain =
      QueryStringProperty<ProductData>(_entities[3].properties[20]);

  /// see [ProductData.rate]
  static final rate =
      QueryDoubleProperty<ProductData>(_entities[3].properties[21]);

  /// see [ProductData.calculation]
  static final calculation =
      QueryStringProperty<ProductData>(_entities[3].properties[22]);

  /// see [ProductData.cipher]
  static final cipher =
      QueryStringProperty<ProductData>(_entities[3].properties[23]);

  /// see [ProductData.createdDate]
  static final createdDate =
      QueryStringProperty<ProductData>(_entities[3].properties[24]);

  /// see [ProductData.add1]
  static final add1 =
      QueryDoubleProperty<ProductData>(_entities[3].properties[25]);

  /// see [ProductData.add2]
  static final add2 =
      QueryDoubleProperty<ProductData>(_entities[3].properties[26]);

  /// see [ProductData.add1a]
  static final add1a =
      QueryDoubleProperty<ProductData>(_entities[3].properties[27]);

  /// see [ProductData.add2a]
  static final add2a =
      QueryDoubleProperty<ProductData>(_entities[3].properties[28]);

  /// see [ProductData.billNo]
  static final billNo =
      QueryStringProperty<ProductData>(_entities[3].properties[29]);

  /// see [ProductData.greturn]
  static final greturn =
      QueryDoubleProperty<ProductData>(_entities[3].properties[30]);

  /// see [ProductData.labelQty]
  static final labelQty =
      QueryDoubleProperty<ProductData>(_entities[3].properties[31]);

  /// see [ProductData.packingNo]
  static final packingNo =
      QueryStringProperty<ProductData>(_entities[3].properties[32]);

  /// see [ProductData.packedQuantity]
  static final packedQuantity =
      QueryDoubleProperty<ProductData>(_entities[3].properties[33]);

  /// see [ProductData.cartonNo]
  static final cartonNo =
      QueryStringProperty<ProductData>(_entities[3].properties[34]);

  /// see [ProductData.invoiceNo]
  static final invoiceNo =
      QueryStringProperty<ProductData>(_entities[3].properties[35]);

  /// see [ProductData.transportBy]
  static final transportBy =
      QueryStringProperty<ProductData>(_entities[3].properties[36]);

  /// see [ProductData.distpatchNo]
  static final distpatchNo =
      QueryStringProperty<ProductData>(_entities[3].properties[37]);
}

/// [SaleData] entity fields to define ObjectBox queries.
class SaleData_ {
  /// see [SaleData.id]
  static final id = QueryIntegerProperty<SaleData>(_entities[4].properties[0]);

  /// see [SaleData.saleNumber]
  static final saleNumber =
      QueryStringProperty<SaleData>(_entities[4].properties[1]);

  /// see [SaleData.saleCreatedDate]
  static final saleCreatedDate =
      QueryIntegerProperty<SaleData>(_entities[4].properties[2]);

  /// see [SaleData.saleTotal]
  static final saleTotal =
      QueryStringProperty<SaleData>(_entities[4].properties[3]);

  /// see [SaleData.saleDiscount]
  static final saleDiscount =
      QueryStringProperty<SaleData>(_entities[4].properties[4]);

  /// see [SaleData.saleCard]
  static final saleCard =
      QueryStringProperty<SaleData>(_entities[4].properties[5]);

  /// see [SaleData.saleCash]
  static final saleCash =
      QueryStringProperty<SaleData>(_entities[4].properties[6]);

  /// see [SaleData.salePoints]
  static final salePoints =
      QueryStringProperty<SaleData>(_entities[4].properties[7]);

  /// see [SaleData.saleBalance]
  static final saleBalance =
      QueryStringProperty<SaleData>(_entities[4].properties[8]);

  /// see [SaleData.data]
  static final data =
      QueryStringVectorProperty<SaleData>(_entities[4].properties[9]);

  /// see [SaleData.isNoExch]
  static final isNoExch =
      QueryBooleanProperty<SaleData>(_entities[4].properties[10]);
}

/// [SaleMode] entity fields to define ObjectBox queries.
class SaleMode_ {
  /// see [SaleMode.id]
  static final id = QueryIntegerProperty<SaleMode>(_entities[5].properties[0]);

  /// see [SaleMode.mode]
  static final mode =
      QueryBooleanProperty<SaleMode>(_entities[5].properties[1]);
}

/// [SaleNumberData] entity fields to define ObjectBox queries.
class SaleNumberData_ {
  /// see [SaleNumberData.id]
  static final id =
      QueryIntegerProperty<SaleNumberData>(_entities[6].properties[0]);

  /// see [SaleNumberData.saleNumber]
  static final saleNumber =
      QueryStringProperty<SaleNumberData>(_entities[6].properties[1]);

  /// see [SaleNumberData.saleCreatedDate]
  static final saleCreatedDate =
      QueryIntegerProperty<SaleNumberData>(_entities[6].properties[2]);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// see [User.id]
  static final id = QueryIntegerProperty<User>(_entities[7].properties[0]);

  /// see [User.username]
  static final username = QueryStringProperty<User>(_entities[7].properties[1]);

  /// see [User.password]
  static final password = QueryStringProperty<User>(_entities[7].properties[2]);

  /// see [User.type]
  static final type = QueryStringProperty<User>(_entities[7].properties[3]);

  /// see [User.store]
  static final store = QueryStringProperty<User>(_entities[7].properties[4]);
}
